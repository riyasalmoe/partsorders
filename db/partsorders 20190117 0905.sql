--
-- Script was generated by Devart dbForge Studio for MySQL, Version 8.0.124.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 17/01/2019 09:05:39 AM
-- Server version: 5.5.5-10.1.21-MariaDB
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

DROP DATABASE IF EXISTS partsorders;

CREATE DATABASE IF NOT EXISTS partsorders
	CHARACTER SET utf8
	COLLATE utf8_general_ci;

--
-- Set default database
--
USE partsorders;

--
-- Create table `users`
--
CREATE TABLE IF NOT EXISTS users (
  EmailAddress VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  FullName VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  Password VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  IsActive BIT(1) DEFAULT b'0',
  IsEnabled BIT(1) DEFAULT b'0',
  IsAuthorized BIT(1) DEFAULT b'0',
  PRIMARY KEY (EmailAddress)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 1489,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci,
COMMENT = 'user management table';

DELIMITER $$

--
-- Create procedure `VerifyUser`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE VerifyUser(IN EmailID VARCHAR(100), IN Pwd VARCHAR(100))
BEGIN

SELECT
  COUNT(partsorders.users.EmailAddress) IsValid
FROM partsorders.users
WHERE partsorders.users.EmailAddress = TRIM(EmailID)
AND partsorders.users.Password = TRIM(Pwd);

END
$$

DELIMITER ;

--
-- Create table `orderheader`
--
CREATE TABLE IF NOT EXISTS orderheader (
  OrderID BIGINT(20) NOT NULL AUTO_INCREMENT,
  JobCardNo VARCHAR(20) NOT NULL,
  CustomerName VARCHAR(255) DEFAULT 'none',
  RequestedBy VARCHAR(100) NOT NULL,
  RequestDate DATE NOT NULL,
  RequestTime TIME NOT NULL,
  Comments VARCHAR(255) DEFAULT 'none',
  LpoNumber VARCHAR(20) DEFAULT 'none',
  PRIMARY KEY (OrderID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `IDX_orderrequestheader` on table `orderheader`
--
ALTER TABLE orderheader 
  ADD INDEX IDX_orderrequestheader(CustomerName, RequestedBy);

--
-- Create index `IDX_orderrequestheader_Comments` on table `orderheader`
--
ALTER TABLE orderheader 
  ADD INDEX IDX_orderrequestheader_Comments(Comments);

--
-- Create index `IDX_orderrequestheader_CustomerName` on table `orderheader`
--
ALTER TABLE orderheader 
  ADD INDEX IDX_orderrequestheader_CustomerName(CustomerName);

--
-- Create index `IDX_orderrequestheader_RequestedBy` on table `orderheader`
--
ALTER TABLE orderheader 
  ADD INDEX IDX_orderrequestheader_RequestedBy(RequestedBy);

--
-- Create index `JobCardNo` on table `orderheader`
--
ALTER TABLE orderheader 
  ADD UNIQUE INDEX JobCardNo(JobCardNo);

--
-- Create table `orderdetails`
--
CREATE TABLE IF NOT EXISTS orderdetails (
  OrderDetailsID BIGINT(20) NOT NULL AUTO_INCREMENT,
  OrderID BIGINT(20) NOT NULL,
  PartNumber VARCHAR(255) NOT NULL,
  PartName VARCHAR(255) DEFAULT 'NA',
  ReqQty BIGINT(20) DEFAULT 1,
  OrdQty BIGINT(20) DEFAULT 0,
  RecQty BIGINT(20) DEFAULT 0,
  ServiceType VARCHAR(100) NOT NULL,
  LpoNumber VARCHAR(20) DEFAULT 'NA',
  Brand VARCHAR(100) NOT NULL,
  Price DOUBLE DEFAULT 0,
  PRIMARY KEY (OrderDetailsID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create index `IDX_orderdetails` on table `orderdetails`
--
ALTER TABLE orderdetails 
  ADD INDEX IDX_orderdetails(PartNumber, PartName, ServiceType, Brand);

--
-- Create index `IDX_orderdetails_LpoNumber` on table `orderdetails`
--
ALTER TABLE orderdetails 
  ADD INDEX IDX_orderdetails_LpoNumber(LpoNumber);

--
-- Create index `IDX_orderdetails_PartName` on table `orderdetails`
--
ALTER TABLE orderdetails 
  ADD INDEX IDX_orderdetails_PartName(PartName);

--
-- Create index `IDX_orderdetails_PartNumber` on table `orderdetails`
--
ALTER TABLE orderdetails 
  ADD INDEX IDX_orderdetails_PartNumber(PartNumber);

--
-- Create foreign key
--
ALTER TABLE orderdetails 
  ADD CONSTRAINT FK_orderdetails_OrderID FOREIGN KEY (OrderID)
    REFERENCES orderheader(OrderID) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Create table `orderitemstatus`
--
CREATE TABLE IF NOT EXISTS orderitemstatus (
  RecID BIGINT(20) NOT NULL AUTO_INCREMENT,
  OrderID BIGINT(20) DEFAULT NULL,
  OrderDetailsID BIGINT(20) DEFAULT NULL,
  Requested BIT(1) DEFAULT b'1',
  ReqDate DATE DEFAULT NULL,
  ReqTime TIME DEFAULT NULL,
  Acknowledged BIT(1) DEFAULT b'0',
  AckDate DATE DEFAULT NULL,
  AckTime TIME DEFAULT NULL,
  Approved BIT(1) DEFAULT b'0',
  AppDate DATE DEFAULT NULL,
  AppTime TIME DEFAULT NULL,
  Ordered BIT(1) DEFAULT b'0',
  OrdDate DATE DEFAULT NULL,
  OrdTime TIME DEFAULT NULL,
  Arrived BIT(1) DEFAULT b'0',
  ArrDate DATE DEFAULT NULL,
  ArrTime TIME DEFAULT NULL,
  ReleaseRequest BIT(1) DEFAULT b'0',
  RelReqDate DATE DEFAULT NULL,
  RelReqTime TIME DEFAULT NULL,
  Released BIT(1) DEFAULT b'0',
  RelDate DATE DEFAULT NULL,
  RelTime TIME DEFAULT NULL,
  ETA VARCHAR(255) DEFAULT 'NA',
  Comments VARCHAR(255) DEFAULT 'NA',
  PRIMARY KEY (RecID)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create foreign key
--
ALTER TABLE orderitemstatus 
  ADD CONSTRAINT FK_orderitemstatus_OrderDetailsID FOREIGN KEY (OrderDetailsID)
    REFERENCES orderdetails(OrderDetailsID) ON DELETE NO ACTION;

--
-- Create foreign key
--
ALTER TABLE orderitemstatus 
  ADD CONSTRAINT FK_orderitemstatus_OrderID FOREIGN KEY (OrderID)
    REFERENCES orderheader(OrderID) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `createRequest`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE createRequest(IN _JobCardNo VARCHAR(20),
  IN _CustomerName VARCHAR(255),
  IN _UserID VARCHAR(100),
  IN _LpoNumber VARCHAR(20),
  IN _Comments VARCHAR(255),
  IN _PartNumber VARCHAR(255),
  IN _PartName VARCHAR(255),
  IN _ReqQty BIGINT,
  IN _ServiceType VARCHAR(100),
  IN _Vendor VARCHAR(100) -- ,
  -- OUT _result BIT
  )
BEGIN
  DECLARE _result BIT;
  DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
        ROLLBACK;
        -- EXIT PROCEDURE;
        SET _result = 0;
    END;

    
    
    START TRANSACTION;
      BEGIN

INSERT INTO orderheader (JobCardNo, CustomerName, RequestedBy, RequestDate, RequestTime, Comments, LpoNumber)
  SELECT
    _JobCardNo,
    _CustomerName,
    _UserID,
    CURRENT_DATE(),
    CURRENT_TIME(),
    _Comments,
    _LpoNumber
  WHERE NOT EXISTS (SELECT
      JobCardNo
    FROM orderheader
    WHERE JobCardNo = _JobCardNo) LIMIT 1;

SELECT
  OrderID INTO @OrderHeaderID
FROM orderheader
WHERE JobCardNo = _JobCardNo;

INSERT INTO orderdetails (OrderID, PartNumber, PartName, ReqQty, ServiceType, LpoNumber, Brand)
  VALUES (@OrderHeaderID, _PartNumber, _PartName, _ReqQty, _ServiceType, _LpoNumber, _Vendor);

SELECT
  MAX(OrderDetailsID) INTO @OrderDetailsID
FROM orderdetails
WHERE OrderID = @OrderHeaderID;

INSERT INTO orderitemstatus (OrderID, OrderDetailsID, Requested, ReqDate, ReqTime)
  VALUES (@OrderHeaderID, @OrderDetailsID, 1, CURRENT_DATE(), CURRENT_TIME());


END;
    COMMIT;
  
    SET _result = 1;
--     SET autocommit = 1;

SELECT
  _result;
END
$$

DELIMITER ;

--
-- Create view `view_all_requests`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW IF NOT EXISTS view_all_requests
AS
SELECT
  `orderheader`.`OrderID` AS `OrderID`,
  `orderheader`.`JobCardNo` AS `JobCardNo`,
  `orderheader`.`CustomerName` AS `CustomerName`,
  `orderheader`.`RequestedBy` AS `RequestedByID`,
  `users`.`FullName` AS `FullName`,
  `orderheader`.`Comments` AS `HeaderComment`,
  `orderdetails`.`OrderDetailsID` AS `OrderDetailsID`,
  `orderdetails`.`PartNumber` AS `PartNumber`,
  `orderdetails`.`PartName` AS `PartName`,
  `orderdetails`.`ReqQty` AS `ReqQty`,
  `orderdetails`.`OrdQty` AS `OrdQty`,
  `orderdetails`.`RecQty` AS `RecQty`,
  `orderdetails`.`ServiceType` AS `ServiceType`,
  `orderdetails`.`Brand` AS `Brand`,
  `orderitemstatus`.`Requested` AS `Requested`,
  `orderitemstatus`.`ReqDate` AS `RequestDate`,
  `orderitemstatus`.`ReqTime` AS `RequestTime`,
  `orderitemstatus`.`Acknowledged` AS `Acknowledged`,
  `orderitemstatus`.`AckDate` AS `AckDate`,
  `orderitemstatus`.`AckTime` AS `AckTime`,
  `orderitemstatus`.`Approved` AS `Approved`,
  `orderitemstatus`.`AppDate` AS `AppDate`,
  `orderitemstatus`.`AppTime` AS `AppTime`,
  `orderitemstatus`.`Ordered` AS `Ordered`,
  `orderitemstatus`.`OrdDate` AS `OrdDate`,
  `orderitemstatus`.`OrdTime` AS `OrdTime`,
  `orderitemstatus`.`Arrived` AS `Arrived`,
  `orderitemstatus`.`ArrDate` AS `ArrDate`,
  `orderitemstatus`.`ArrTime` AS `ArrTime`,
  `orderitemstatus`.`ReleaseRequest` AS `ReleaseRequest`,
  `orderitemstatus`.`RelReqDate` AS `RelReqDate`,
  `orderitemstatus`.`RelReqTime` AS `RelReqTime`,
  `orderitemstatus`.`Released` AS `Released`,
  `orderitemstatus`.`RelDate` AS `RelDate`,
  `orderitemstatus`.`RelTime` AS `RelTime`,
  `orderitemstatus`.`Comments` AS `ItemComment`,
  `orderitemstatus`.`ETA` AS `ETA`
FROM (((`orderitemstatus`
  JOIN `orderheader`
    ON ((`orderitemstatus`.`OrderID` = `orderheader`.`OrderID`)))
  JOIN `orderdetails`
    ON (((`orderdetails`.`OrderID` = `orderheader`.`OrderID`)
    AND (`orderitemstatus`.`OrderDetailsID` = `orderdetails`.`OrderDetailsID`))))
  LEFT JOIN `users`
    ON ((`users`.`EmailAddress` = `orderheader`.`RequestedBy`)));

DELIMITER $$

--
-- Create procedure `getmyRequests`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getmyRequests(IN _RequestedByID VARCHAR(100))
BEGIN
SELECT
  OrderID,
  JobCardNo,
  CustomerName,
  RequestedByID,
  FullName,
  HeaderComment,
  OrderDetailsID,
  PartNumber,
  PartName,
  ReqQty,
  OrdQty,
  RecQty,
  ServiceType,
  Brand,
  Requested,
  DATE_FORMAT(RequestDate, '%d-%b-%X') RequestDate,
  RequestTime,
  Acknowledged,
  AckDate,
  AckTime,
  Approved,
  AppDate,
  AppTime,
  Ordered,
  OrdDate,
  OrdTime,
  Arrived,
  ArrDate,
  ArrTime,
  ReleaseRequest,
  RelReqDate,
  RelReqTime,
  Released,
  RelDate,
  RelTime,
  ItemComment,
  ETA
FROM partsorders.view_all_requests
WHERE RequestedByID = _RequestedByID
ORDER BY RequestDate DESC, RequestTime DESC;
END
$$

--
-- Create procedure `getMyJobRequests`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getMyJobRequests(IN _JobCardNo VARCHAR(100))
BEGIN
SELECT
  OrderID,
  JobCardNo,
  CustomerName,
  RequestedByID,
  FullName,
  HeaderComment,
  OrderDetailsID,
  PartNumber,
  PartName,
  ReqQty,
  OrdQty,
  RecQty,
  ServiceType,
  Brand,
  Requested,
  DATE_FORMAT(RequestDate, '%d-%b-%X') RequestDate,
  RequestTime,
  Acknowledged,
  AckDate,
  AckTime,
  Approved,
  AppDate,
  AppTime,
  Ordered,
  OrdDate,
  OrdTime,
  Arrived,
  ArrDate,
  ArrTime,
  ReleaseRequest,
  RelReqDate,
  RelReqTime,
  Released,
  RelDate,
  RelTime,
  ItemComment,
  ETA
FROM partsorders.view_all_requests
WHERE JobCardNo = _JobCardNo
ORDER BY RequestDate DESC, RequestTime DESC;
END
$$

DELIMITER ;

--
-- Create table `roles`
--
CREATE TABLE IF NOT EXISTS roles (
  RoleID BIGINT(20) NOT NULL AUTO_INCREMENT,
  RoleName VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL,
  IsActive BIT(1) DEFAULT NULL,
  PRIMARY KEY (RoleID)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 3276,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci,
COMMENT = 'defined static roles of users';

--
-- Create index `RoleName` on table `roles`
--
ALTER TABLE roles 
  ADD UNIQUE INDEX RoleName(RoleName);

--
-- Create table `userroles`
--
CREATE TABLE IF NOT EXISTS userroles (
  EmailAddress VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  RoleID BIGINT(20) NOT NULL DEFAULT 5,
  RecordID BIGINT(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (RecordID)
)
ENGINE = INNODB,
AUTO_INCREMENT = 16,
AVG_ROW_LENGTH = 1260,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci,
COMMENT = 'Roles Assigned to users';

--
-- Create index `FK_userroles_user` on table `userroles`
--
ALTER TABLE userroles 
  ADD INDEX FK_userroles_user(EmailAddress);

--
-- Create foreign key
--
ALTER TABLE userroles 
  ADD CONSTRAINT FK_userroles_roles FOREIGN KEY (RoleID)
    REFERENCES roles(RoleID) ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE userroles 
  ADD CONSTRAINT FK_userroles_users FOREIGN KEY (EmailAddress)
    REFERENCES users(EmailAddress) ON UPDATE CASCADE;

--
-- Create view `view_all_users`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW IF NOT EXISTS view_all_users
AS
SELECT
  `users`.`EmailAddress` AS `UserID`,
  `users`.`FullName` AS `FullName`,
  `users`.`IsActive` AS `IsActive`,
  `users`.`IsEnabled` AS `IsEnabled`,
  `users`.`IsAuthorized` AS `IsAuthorized`,
  `userroles`.`RoleID` AS `RoleID`,
  `roles`.`RoleName` AS `RoleName`
FROM ((`userroles`
  JOIN `users`
    ON ((`userroles`.`EmailAddress` = `users`.`EmailAddress`)))
  JOIN `roles`
    ON ((`userroles`.`RoleID` = `roles`.`RoleID`)))
ORDER BY `users`.`FullName`;

DELIMITER $$

--
-- Create procedure `getUserRights`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getUserRights(
  IN _UserID VARCHAR(100))
BEGIN

SELECT
  RoleID,
  RoleName
FROM view_all_users
WHERE UserID = _UserID;

END
$$

--
-- Create procedure `getUserFullName`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE getUserFullName(IN EmailID VARCHAR(100))
BEGIN

SELECT
  FullName
FROM view_all_users
WHERE UserID = EmailID LIMIT 1;

END
$$

DELIMITER ;

CREATE USER IF NOT EXISTS ''@'localhost' IDENTIFIED WITH mysql_native_password;



CREATE USER IF NOT EXISTS 'almoesvc'@'%' IDENTIFIED WITH mysql_native_password;
GRANT Usage ON *.* TO 'almoesvc'@'%' 
WITH GRANT OPTION;
SET PASSWORD FOR 'almoesvc'@'%' = '*9DB3CD281E7F6F0F2CD9164CFD5835855753E762';
GRANT ALL PRIVILEGES ON *.* TO 'almoesvc'@'%';
GRANT Select, Insert, Update, Delete, Create, Drop, Grant Option, References, Index, Alter, Create Temporary Tables, Lock Tables, Create View, Show View, Create Routine, Alter Routine, Execute, Event, Trigger ON  almoeservice.* TO 'almoesvc'@'%';



CREATE USER IF NOT EXISTS 'pma'@'localhost' IDENTIFIED WITH mysql_native_password;
GRANT Select, Insert, Update, Delete, Execute ON  phpmyadmin.* TO 'pma'@'localhost';
GRANT Select (Host), Select (User), Select (Select_priv), Select (Insert_priv), Select (Update_priv), Select (Delete_priv), Select (Create_priv), Select (Drop_priv), Select (Reload_priv), Select (Shutdown_priv), Select (Process_priv), Select (File_priv), Select (Grant_priv), Select (References_priv), Select (Index_priv), Select (Alter_priv), Select (Show_db_priv), Select (Super_priv), Select (Create_tmp_table_priv), Select (Lock_tables_priv), Select (Execute_priv), Select (Repl_slave_priv), Select (Repl_client_priv) ON  mysql.user TO 'pma'@'localhost';
GRANT Select (Host), Select (Db), Select (User), Select (Table_name), Select (Table_priv), Select (Column_priv) ON  mysql.tables_priv TO 'pma'@'localhost';



CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED WITH mysql_native_password;
GRANT Usage ON *.* TO 'root'@'%' 
WITH GRANT OPTION;
SET PASSWORD FOR 'root'@'%' = '*9DB3CD281E7F6F0F2CD9164CFD5835855753E762';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';



CREATE USER IF NOT EXISTS 'root'@'127.0.0.1' IDENTIFIED WITH mysql_native_password;
GRANT Usage ON *.* TO 'root'@'127.0.0.1' 
WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO 'root'@'127.0.0.1';



CREATE USER IF NOT EXISTS 'root'@'::1' IDENTIFIED WITH mysql_native_password;
GRANT Usage ON *.* TO 'root'@'::1' 
WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO 'root'@'::1';



-- CREATE USER IF NOT EXISTS 'root'@'localhost' IDENTIFIED WITH mysql_native_password;
-- GRANT Usage ON *.* TO 'root'@'localhost' 
-- WITH GRANT OPTION;
-- GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost';
-- GRANT PROXY ON ''@'' TO 'root'@'localhost' WITH GRANT OPTION;



-- 
-- Dumping data for table users
--
INSERT INTO users VALUES
('accounts.svc@almoe.com', 'Prasad', 'pa$$word', True, True, True),
('fathima@almoe.com', 'Fathima', 'pa$$word', True, True, True),
('geo@almoe.com', 'Geo James', 'pa$$word', True, True, True),
('glenn.a@almoe.com', 'Glenn Aglubat', 'pa$$word', True, True, True),
('neil.carroll@almoe.com', 'Neil Carroll', 'pa$$word', True, True, True),
('projectcoordinator.ads@almoe.com', 'Anas', 'pa$$word', True, True, True),
('ramachandran.k@almoe.com', 'Ramachandran K', 'pa$$word', True, True, True),
('riyas.a@almoe.com', 'Riyas Aboobaker', 'pa$$word', True, True, True),
('shijo.j@almoe.com', 'Shijo Jose', 'pa$$word', True, True, True),
('slpproject@almoe.com', 'SLP Project', 'pa$$word', True, True, True),
('support@almoe.com', 'Almoe Support', 'pa$$word', True, True, True),
('svccoordinator.ads@almoe.com', 'Swapna Nair', 'pa$$word', True, True, True),
('vijith.k@almoe.com', 'Vijith Nair', 'pa$$word', True, True, True);

-- 
-- Dumping data for table roles
--
INSERT INTO roles VALUES
(1, 'Administrators', True),
(2, 'Approvers', True),
(3, 'Initiators', True),
(4, 'Executers', True),
(5, 'Viewers', True);

-- 
-- Dumping data for table orderheader
--
-- Table partsorders.orderheader does not contain any data (it is empty)

-- 
-- Dumping data for table orderdetails
--
-- Table partsorders.orderdetails does not contain any data (it is empty)

-- 
-- Dumping data for table userroles
--
INSERT INTO userroles VALUES
('accounts.svc@almoe.com', 4, 3),
('fathima@almoe.com', 3, 4),
('geo@almoe.com', 5, 5),
('glenn.a@almoe.com', 5, 6),
('neil.carroll@almoe.com', 5, 7),
('projectcoordinator.ads@almoe.com', 3, 8),
('ramachandran.k@almoe.com', 5, 9),
('riyas.a@almoe.com', 1, 10),
('shijo.j@almoe.com', 5, 11),
('slpproject@almoe.com', 3, 12),
('support@almoe.com', 5, 13),
('svccoordinator.ads@almoe.com', 3, 14),
('vijith.k@almoe.com', 5, 15);

-- 
-- Dumping data for table orderitemstatus
--
-- Table partsorders.orderitemstatus does not contain any data (it is empty)

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;